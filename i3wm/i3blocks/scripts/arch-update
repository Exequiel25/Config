#!/usr/bin/env python3
#
# Copyright (C) 2017 Marcel Patzwahl
# Licensed under the terms of the GNU GPL v3 only.
#
# i3blocks blocklet script to see the available updates of pacman and the AUR
# Modified by Exequiel J Magni G 2023

import argparse
import os
import re
import shlex
import subprocess

def create_argparse():
    def _default(name, default='', arg_type=str):
        return arg_type(os.environ.get(name, default))

    strbool = lambda s: s.lower() in {'t', 'true', '1'}
    strlist = lambda s: s.split()

    parser = argparse.ArgumentParser(description='Check for pacman updates')
    parser.add_argument('-b', '--base_color', default=_default('BASE_COLOR', 'green'), help='base color of the output (default=green)')
    parser.add_argument('-u', '--updates_available_color', default=_default('UPDATE_COLOR', 'yellow'), help='color of the output, when updates are available (default=yellow)')
    parser.add_argument('-a', '--aur', action='store_const', const=True, default=_default('AUR', 'False', strbool), help='include AUR packages. Attn: Yaourt must be installed')
    parser.add_argument('-y', '--aur_yay', action='store_const', const=True, default=_default('AUR_YAY', 'False', strbool), help='include AUR packages. Attn: Yay must be installed')
    parser.add_argument('-q', '--quiet', action='store_const', const=True, default=_default('QUIET', 'False', strbool), help='do not produce output when system is up to date')
    parser.add_argument('-w', '--watch', nargs='*', default=_default('WATCH', arg_type=strlist), help='explicitly watch for specified packages. Listed elements are treated as regular expressions for matching.')
    return parser.parse_args()


def get_updates():
    output = ''
    try:
        output = subprocess.check_output(['checkupdates']).decode('utf-8')
    except subprocess.CalledProcessError as exc:
        # checkupdates exits with 2 and no output if no updates are available.
        # we ignore this case and go on
        if not (exc.returncode == 2 and not exc.output):
            raise exc
    if not output:
        return []
    return [line.split(' ')[0] for line in output.split('\n') if line]


def get_aur_updates(command):
    try:
        output = subprocess.check_output(shlex.split(command)).decode()
        return [line.split(' ')[0] for line in output.split('\n') if line.startswith('aur/')]
    except subprocess.CalledProcessError as e:
        if e.returncode != 1 or e.output:
            raise e
        return []


def matching_updates(updates, watch_list):
    matches = set()
    for u in updates:
        for w in watch_list:
            if re.match(w, u):
                matches.add(u)
    return matches


label = os.environ.get('LABEL', '')
message = '{0}<span color="{1}">{2}</span>'
args = create_argparse()

updates = get_updates()
if args.aur:
    updates += get_aur_updates('yaourt -Qua')
elif args.aur_yay:
    updates += get_aur_updates('yay -Qua')

update_count = len(updates)
if update_count > 0:
    if update_count == 1:
        info = '1 update available'
        short_info = '1 update'
    else:
        info = f'{update_count} updates available'
        short_info = f'{update_count} updates'

    matches = matching_updates(updates, args.watch)
    if matches:
        info += f' [{", ".join(matches)}]'
        short_info += '*'
    print(message.format(label, args.updates_available_color, info))
    print(message.format(label, args.updates_available_color, short_info))
elif not args.quiet:
    print(message.format(label, args.base_color, 'system up to date'))